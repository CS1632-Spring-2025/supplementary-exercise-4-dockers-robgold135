package edu.pitt.cs;
import static org.hamcrest.MatcherAssert.assertThat;
import org.junit.FixMethodOrder;
import org.junit.runners.MethodSorters;
import java.time.Duration;

// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
import org.openqa.selenium.chrome.ChromeOptions;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class D3Test {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    driver = new ChromeDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
    ChromeOptions options = new ChromeOptions();
    options.addArguments("--headless");
    driver = new ChromeDriver(options);
  }
  @After
  public void tearDown() {
    driver.quit();
  }
  
  @Test
  public void tEST2RESET() {
    // Test name: TEST-2-RESET
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=true";document.cookie = "2=true";document.cookie = "3=true"; | 
    js.executeScript("document.cookie = \"1=true\";document.cookie = \"2=true\";document.cookie = \"3=true\";");
    // 4 | click | linkText=Reset | 
    driver.findElement(By.linkText("Reset")).click();
    // 5 | storeText | id=cat-id1 | cat1
    vars.put("cat1", driver.findElement(By.id("cat-id1")).getText());
    // 6 | assert | cat1 | ID 1. Jennyanydots
    assertEquals(vars.get("cat1").toString(), "ID 1. Jennyanydots");
    // 7 | storeText | id=cat-id2 | cat2
    vars.put("cat2", driver.findElement(By.id("cat-id2")).getText());
    // 8 | assert | cat2 | ID 2. Old Deuteronomy
    assertEquals(vars.get("cat2").toString(), "ID 2. Old Deuteronomy");
    // 9 | storeText | id=cat-id3 | cat3
    vars.put("cat3", driver.findElement(By.id("cat-id3")).getText());
    // 10 | assert | cat3 | ID 3. Mistoffelees
    assertEquals(vars.get("cat3").toString(), "ID 3. Mistoffelees");
  }
  @Test
  public void tEST3CATALOG() {
    // Test name: TEST-3-CATALOG
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 4 | click | linkText=Catalog | 
    driver.findElement(By.linkText("Catalog")).click();
    // 5 | storeAttribute | xpath=//li[2]/img@src | img
    {
      WebElement element = driver.findElement(By.xpath("//li[2]/img"));
      String attribute = element.getAttribute("src");
      vars.put("img", attribute);
    }
    // 6 | assert | img | /images/cat2.jpg
    assertEquals(vars.get("img").toString(), "http://localhost:8080/images/cat2.jpg");
  }
  @Test
  public void tEST1LINKS() {
    // Test name: TEST-1-LINKS
    // Step # | name | target | value
    // 1 | open | http://localhost:8080/ | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 4 | storeAttribute | xpath=//a[contains(text(),'Reset')]@href | result
    {
      WebElement element = driver.findElement(By.xpath("//a[contains(text(),\'Reset\')]"));
      String attribute = element.getAttribute("href");
      vars.put("result", attribute);
    }
    // 5 | assert | result | /reset
    assertEquals(vars.get("result").toString(), "http://localhost:8080/reset");
  }
  @Test
  public void tEST4LISTING() {
    // Test name: TEST-4-LISTING
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 4 | click | linkText=Catalog | 
    driver.findElement(By.linkText("Catalog")).click();
    // 5 | storeXpathCount | xpath=//div/ul/li | length
    vars.put("length", driver.findElements(By.xpath("//div/ul/li")).size());
    // 6 | assert | length | 3
    assertEquals(vars.get("length").toString(), "3");
    // 7 | storeText | xpath=//div/ul/li[3] | cat3
    vars.put("cat3", driver.findElement(By.xpath("//div/ul/li[3]")).getText());
    // 8 | assert | cat3 | ID 3. Mistoffelees
    assertEquals(vars.get("cat3").toString(), "ID 3. Mistoffelees");
  }
  @Test
  public void tEST5RENTACAT() {
    // Test name: TEST-5-RENT-A-CAT
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 4 | click | linkText=Rent-A-Cat | 
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    // 5 | verifyElementPresent | xpath=//button[contains(.,'Rent')] | 
    {
      List<WebElement> elements = driver.findElements(By.xpath("//button[contains(.,\'Rent\')]"));
      assert(elements.size() > 0);
    }
    // 6 | verifyElementPresent | xpath=//button[contains(.,'Return')] | 
    {
      List<WebElement> elements = driver.findElements(By.xpath("//button[contains(.,\'Return\')]"));
      assert(elements.size() > 0);
    }
  }
  @Test
  public void tEST6RENT() {
    // Test name: TEST-6-RENT
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 4 | click | linkText=Rent-A-Cat | 
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    // 5 | click | id=rentID | 
    driver.findElement(By.id("rentID")).click();
    // 6 | type | id=rentID | 1
    driver.findElement(By.id("rentID")).sendKeys("1");
    // 7 | click | xpath=//button[contains(.,'Rent')] | 
    driver.findElement(By.xpath("//button[contains(.,\'Rent\')]")).click();
    // 8 | storeText | xpath=//div/ul/li[1] | cat1
    vars.put("cat1", driver.findElement(By.xpath("//div/ul/li[1]")).getText());
    // 9 | storeText | xpath=//div/ul/li[2] | cat2
    vars.put("cat2", driver.findElement(By.xpath("//div/ul/li[2]")).getText());
    // 10 | storeText | xpath=//div/ul/li[3] | cat3
    vars.put("cat3", driver.findElement(By.xpath("//div/ul/li[3]")).getText());
    // 11 | assert | cat1 | Rented out
    assertEquals(vars.get("cat1").toString(), "Rented out");
    // 12 | assert | cat2 | ID 2. Old Deuteronomy
    assertEquals(vars.get("cat2").toString(), "ID 2. Old Deuteronomy");
    // 13 | assert | cat3 | ID 3. Mistoffelees
    assertEquals(vars.get("cat3").toString(), "ID 3. Mistoffelees");
    // 14 | storeText | id=rentResult | result
    vars.put("result", driver.findElement(By.id("rentResult")).getText());
    // 15 | assert | result | Success!
    assertEquals(vars.get("result").toString(), "Success!");
  }
  @Test
  public void tEST9FEED() {
    // Test name: TEST-9-FEED
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 4 | click | linkText=Feed-A-Cat | 
    driver.findElement(By.linkText("Feed-A-Cat")).click();
    // 5 | click | id=catnips | 
    driver.findElement(By.id("catnips")).click();
    // 6 | type | id=catnips | 6
    driver.findElement(By.id("catnips")).sendKeys("6");
    // 7 | click | xpath=//button[contains(.,'Feed')] | 
    driver.findElement(By.xpath("//button[contains(.,\'Feed\')]")).click();
    // 8 | waitForElementVisible | xpath=//*[@id='feedResult' and text()='Nom, nom, nom.'] | 30000
    {
      WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(30));
      wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[@id=\'feedResult\' and text()=\'Nom, nom, nom.\']")));
    }
    // 9 | storeText | id=feedResult | result
    vars.put("result", driver.findElement(By.id("feedResult")).getText());
    // 10 | assert | result | Nom, nom, nom.
    assertEquals(vars.get("result").toString(), "Nom, nom, nom.");
  }
  @Test
  public void tEST8FEEDACAT() {
    // Test name: TEST-8-FEED-A-CAT
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 4 | click | linkText=Feed-A-Cat | 
    driver.findElement(By.linkText("Feed-A-Cat")).click();
    // 5 | verifyElementPresent | xpath=//button[contains(.,'Feed')] | 
    {
      List<WebElement> elements = driver.findElements(By.xpath("//button[contains(.,\'Feed\')]"));
      assert(elements.size() > 0);
    }
  }
  @Test
  public void tEST7RETURN() {
    // Test name: TEST-7-RETURN
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=true";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=true\";document.cookie = \"3=false\";");
    // 4 | click | linkText=Rent-A-Cat | 
    driver.findElement(By.linkText("Rent-A-Cat")).click();
    // 5 | click | id=returnID | 
    driver.findElement(By.id("returnID")).click();
    // 6 | type | id=returnID | 2
    driver.findElement(By.id("returnID")).sendKeys("2");
    // 7 | click | xpath=//button[contains(.,'Return')] | 
    driver.findElement(By.xpath("//button[contains(.,\'Return\')]")).click();
    // 8 | storeText | id=cat-id1 | cat1
    vars.put("cat1", driver.findElement(By.id("cat-id1")).getText());
    // 9 | storeText | id=cat-id2 | cat2
    vars.put("cat2", driver.findElement(By.id("cat-id2")).getText());
    // 10 | storeText | id=cat-id3 | cat3
    vars.put("cat3", driver.findElement(By.id("cat-id3")).getText());
    // 11 | assert | cat1 | ID 1. Jennyanydots
    assertEquals(vars.get("cat1").toString(), "ID 1. Jennyanydots");
    // 12 | assert | cat2 | ID 2. Old Deuteronomy
    assertEquals(vars.get("cat2").toString(), "ID 2. Old Deuteronomy");
    // 13 | assert | cat3 | ID 3. Mistoffelees
    assertEquals(vars.get("cat3").toString(), "ID 3. Mistoffelees");
    // 14 | storeText | id=returnResult | result
    vars.put("result", driver.findElement(By.id("returnResult")).getText());
    // 15 | assert | result | Success!
    assertEquals(vars.get("result").toString(), "Success!");
  }
  @Test
  public void tEST10GREETACAT() {
    // Test name: TEST-10-GREET-A-CAT
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 4 | click | linkText=Greet-A-Cat | 
    driver.findElement(By.linkText("Greet-A-Cat")).click();
    // 5 | assertText | xpath=//*[contains(text(), 'Meow!Meow!Meow!')] | Meow!Meow!Meow!
    assertThat(driver.findElement(By.xpath("//*[contains(text(), \'Meow!Meow!Meow!\')]")).getText(), is("Meow!Meow!Meow!"));
  }
  @Test
  public void tEST11GREETACATWITHNAME() {
    // Test name: TEST-11-GREET-A-CAT-WITH-NAME
    // Step # | name | target | value
    // 1 | open | http://localhost:8080 | 
    driver.get("http://localhost:8080");
    // 2 | setWindowSize | 884x827 | 
    driver.manage().window().setSize(new Dimension(884, 827));
    // 3 | runScript | document.cookie = "1=false";document.cookie = "2=false";document.cookie = "3=false"; | 
    js.executeScript("document.cookie = \"1=false\";document.cookie = \"2=false\";document.cookie = \"3=false\";");
    // 4 | click | linkText=Greet-A-Cat | 
    driver.findElement(By.linkText("Greet-A-Cat")).click();
    // 5 | open | /greet-a-cat/Jennyanydots | 
    driver.get("http://localhost:8080/greet-a-cat/Jennyanydots");
    // 6 | assertText | xpath=//*[contains(text(), 'Meow! from Jennyanydots.')] | Meow! from Jennyanydots.
    assertThat(driver.findElement(By.xpath("//*[contains(text(), \'Meow! from Jennyanydots.\')]")).getText(), is("Meow! from Jennyanydots."));
  }
}
